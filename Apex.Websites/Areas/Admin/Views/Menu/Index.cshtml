@using Apex.Data.Entities.Accounts;
@model IList<Menu>
@{
    ViewData["Title"] = "Menu";

    ViewData["Breadcrumb"] = new Breadcrumb(new Crumb[] {
        new Crumb("Dashboard", Url.Action("index", "dashboard"), "fa-dashboard"),
        new Crumb("Menu", string.Empty, "fa-list-ul")
    });
}
@section scripts {
    <script src="~/assets/scripts/admin/menu.list.min.js" asp-append-version="true"></script>
}
<div class="box box-solid">
    <div class="box-header">
        <h3 class="box-title"></h3>
        <div class="box-tools">
            <a href="/admin/menu/create" class="btn btn-sm btn-flat btn-success"><i class="fa fa-plus"></i> Create New</a>
            <button type="button" class="btn btn-sm btn-flat btn-danger disabled" id="btnDelete" disabled="disabled"><i class="fa fa-trash-o"></i> Delete (Selected)</button>
        </div>
    </div>
    <div class="box-body">
        <table class="table table-hover">
            <tr>
                <th><input id="checkbox-all" type="checkbox"></th>
                <th>Title</th>
                <th>Url</th>
                <th>Icon</th>
                <th>Note</th>
                <th>Priority</th>
                <th></th>
            </tr>
            @if (Model == null || Model.Count == 0)
            { 
                <tr>
                    <td colspan="7">No data found</td>
                </tr>
            }
            else
            {
                foreach (var menu in Model)
                {
                    @:@Html.Raw(Render(menu))
                }
            }
        </table>
    </div>
</div>
@functions {
    public string Render(Menu menu)
    {
        return $"{RenderRow(menu, 0)}{RenderSubMenu(menu, 1)}";
    }
    public string RenderSubMenu(Menu parent, int level)
    {
        level++;
        string html = string.Empty;

        foreach (var menu in parent.SubMenus)
        {
            html += $"{RenderRow(menu, level)}{RenderSubMenu(menu, level)}";
        }

        return html;
    }
    public string RenderRow(Menu menu, int level)
    {
        return $"<tr>{RenderCheckbox(menu)}{RenderTitle(menu, level)}{RenderUrl(menu)}{RenderIcon(menu)}{RenderNote(menu)}{RenderPriority(menu)}{RenderUpdateControl(menu)}</tr>";
    }
    public string RenderCheckbox(Menu menu)
    {
        return $"<td class=\"checkbox-control\"><input value=\"{menu.Id}\" type=\"checkbox\"></td>";
    }
    public string RenderTitle(Menu menu, int level)
    {
        return level > 0 ?
            $"<td><span class=\"menu-level-{level}\">└──</span> {menu.Title}</td>" :
            $"<td>{menu.Title}</td>";
    }
    public string RenderUrl(Menu menu)
    {
        return $"<td>{menu.Url}</td>";
    }
    public string RenderIcon(Menu menu)
    {
        return string.IsNullOrEmpty(menu.Icon) ?
            "<td></td>" :
            $"<td><i class=\"{menu.Icon}\"></i></td>";
    }
    public string RenderNote(Menu menu)
    {
        string noteIcon = string.IsNullOrEmpty(menu.NoteBackground) ?
            menu.Note :
            $"<small class=\"label {menu.NoteBackground}\">{menu.Note}</small>";

        return $"<td>{noteIcon}</td>";
    }
    public string RenderPriority(Menu menu)
    {
        return $"<td>{menu.Priority}</td>";
    }
    public string RenderUpdateControl(Menu menu)
    {
        return $"<td class=\"update-control\"><a href=\"/admin/menu/update?id={menu.Id}\" class=\"fa fa-pencil\" title=\"Update\"></a></td>";
    }
}
